//********************BFS********************
#include<bits/stdc++.h>
using namespace std;
 
void BFS(int vtx, int A[8][8] , int n)
{
    queue<int> Q;
    
    int visited[8] = {0};
    
    cout<<vtx<<",";  //For the first vertex
    visited[vtx]=1;
    Q.emplace(vtx);
    
    
    while(!Q.empty())
    {
        int u=Q.front(); //Vertex for exploring
        Q.pop();
        
        for(int v=1;v<n;v++)  //Adjacent vertex of vertex u
        {
            if(A[u][v]==1 && visited[v]== 0)  //adjacent vertex are not visited
            {
                cout<<v<<",";
                visited[v]=1;
                Q.emplace(v);
            }
        }
        
    }
    cout<<endl;
}

int main()
{
     
    int A[8][8] = {{0, 0, 0, 0, 0, 0, 0, 0},
                   {0, 0, 1, 1, 1, 0, 0, 0},
                   {0, 1, 0, 1, 0, 0, 0, 0},
                   {0, 1, 1, 0, 1, 1, 0, 0},
                   {0, 1, 0, 1, 0, 1, 0, 0},
                   {0, 0, 0, 1, 1, 0, 1, 1},
                   {0, 0, 0, 0, 0, 1, 0, 0},
                   {0, 0, 0, 0, 0, 1, 0, 0}};
 
    cout << "Vertex: 1 -> " << flush;
    BFS(1, A, 8);
 
    cout << "Vertex: 4 -> " << flush;
    BFS(4, A, 8);
 
 
    return 0;
}
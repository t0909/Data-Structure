/********QUEUE USING TWO STACK*************

//*****MAKING ENQUEUE OPERATION COSTLY*****

/* enQueue(q, x):

While stack1 is not empty, push everything from stack1 to stack2.
Push x to stack1 (assuming size of stacks is unlimited).
Push everything back to stack1.
Here time complexity will be O(n)

deQueue(q):

If stack1 is empty then error
Pop an item from stack1 and return it
Here time complexity will be O(1) */

#include<bits/stdc++.h>
using namespace std;

class Queue
{
    
    public:
    stack<int> s1,s2;
    
    void enqueue(int x);
    int  dequeue();
};

void Queue::enqueue(int x) // O(2n)=O(n)
{
    while(!s1.empty())
    {
        s2.push(s1.top());
        s1.pop();
    }
    
     s1.push(x);
     while(!s2.empty())
     {
         s1.push(s2.top());
         s2.pop();
     }
}

int Queue::dequeue() // O(1)
{
    int x=-1;
    x=s1.top();
    s1.pop();
    return x;
}



int main()
{
    Queue q; 
    q.enqueue(1); 
    q.enqueue(2); 
    q.enqueue(3); 
  
    cout << q.dequeue() << '\n'; 
    cout << q.dequeue() << '\n'; 
    cout << q.dequeue() << '\n'; 
  
    return 0; 
}
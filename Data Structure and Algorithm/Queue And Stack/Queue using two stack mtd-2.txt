//********QUEUE USING TWO STACK*************

//*****MAKING DEQUEUE OPERATION COSTLY*****

/* Method 2 (By making deQueue operation costly)In this method, in en-queue operation, the new element is entered at the top of stack1. 
  In de-queue operation, if stack2 is empty then all the elements are moved to stack2 and finally top of stack2 is returned. */

#include<bits/stdc++.h>
using namespace std;

class Queue
{
    
    public:
    stack<int> s1,s2;
    
    void enqueue(int x);
    int  dequeue();
};

void Queue::enqueue(int x) // O(1)
{
   s1.push(x);
}

int Queue::dequeue() // O(2n)=O(n)
{
    int x=-1;
    if(s1.empty()&&s2.empty())
    {
        cout<<"Queue is Empty";
        return x;
    }
    else
    {
        if(s2.empty())
        {
            while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
                
            }
        }
        
    }
    x=s2.top();
    s2.pop();
    return x;
}



int main()
{
    Queue q; 
    q.enqueue(1); 
    q.enqueue(2); 
    q.enqueue(3); 
  
    cout << q.dequeue() << '\n'; 
    cout << q.dequeue() << '\n'; 
    cout << q.dequeue() << '\n'; 
  
    return 0; 
}